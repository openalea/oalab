[build-system]
requires = [
    "setuptools",
    "setuptools_scm",
]
build-backend = "setuptools.build_meta"

# where your source lies if you followed src layout
[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools]
include-package-data = false # force explicit declaration of data (disable automatic inclusion)

# enable dynamic version based on git tags
[tool.setuptools_scm]

[project]
name = "openalea.scipack"
authors = [
  { name = "scipack" },
]
description = "Sientific Python wrappers for OpenAlea Visual Programming environment."
readme = "README.md"
license = "CECILL-C"
license-files = ["LICEN[CS]E*"]
requires-python = ">=3.10"
dynamic = ["version"]
classifiers = [
  "Development Status :: 1 - Planning",
  "Intended Audience :: Science/Research",
  "Intended Audience :: Developers",
  "Operating System :: OS Independent",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Topic :: Scientific/Engineering",
]

# you can list here all dependencies that are pip-instalable, and that have a name identical to the one used by conda (to allow reuse of this list in meta.yaml)
# If conda name is different, please do not declare the pip name, and declare conda name in the next section
dependencies = [
    "numpy",
    "matplotlib",
    "ipykernel",
    "configobj",
    "imageio",
]

[project.optional-dependencies]
test = [
  "pytest",
  "nbmake",
]
dev = [
  "pytest >=6",
  "pytest-cov >=3",
]
doc = [
  "sphinx-autobuild",
  "pydata-sphinx-theme",
  "myst-parser",
  "sphinx-favicon",
  "ipykernel",
  "sphinx-copybutton",
  "ipython_genutils",
  "nbsphinx",
]

# section specific to conda-only distributed package (not used by pip yet)
[tool.conda.environment]
channels = [
  "openalea3",
  "conda-forge"
]
dependencies = [
    "openalea.core",
]

[project.urls]
Repository = "https://github.com/openalea/scipack"
Homepage = "https://openalea.rtfd.io"
"Bug Tracker" = "https://github.com/openalea/scipack/issues"
Discussions = "https://github.com/openalea/scipack/discussions"
Changelog = "https://github.com/openalea/scipack/releases"

[tool.setuptools.package-data]
"*" = ['*']

[project.entry-points."wralea"]
#numpy
"openalea.numpy" = "openalea.numpy_wralea"
"openalea.numpy.random" = "openalea.numpy_wralea.random"
"openalea.numpy.creation" = "openalea.numpy_wralea.creation"
"openalea.numpy.infos" = "openalea.numpy_wralea.infos"
"openalea.numpy.input_output" = "openalea.numpy_wralea.input_output"
"openalea.numpy.manipulation" = "openalea.numpy_wralea.manipulation"
"openalea.numpy.math" = "openalea.numpy_wralea.math"
"openalea.numpy.sorting_searching" = "openalea.numpy_wralea.sorting_searching"
"openalea.numpy.window" = "openalea.numpy_wralea.window"
"openalea.numpy.demo" = "openalea.numpy_demo_wralea"
"openalea.numpy.test" = "openalea.numpy_test_wralea"
#pylab
"pylab" = "openalea.pylab_main_wralea"
"pylab.demo" = "openalea.pylab_demo_wralea"
"pylab.plotting" = "openalea.pylab_plotting_wralea"
"pylab.datasets" = "openalea.pylab_datasets_wralea"
"pylab.decorators" = "openalea.pylab_decorators_wralea"
"pylab.Drawing" = "openalea.pylab_drawing_wralea"
"pylab.test" = "openalea.pylab_test_wralea"
"pylab.patches" = "openalea.pylab_patches_wralea"
"pylab.mplot3d" = "openalea.pylab_3d_wralea"
#stdlib
"openalea.color" = "openalea.color"
"openalea.csv" = "openalea.csv"
"openalea.string" = "openalea.string"
"openalea.data" = "openalea.data"
"openalea.datafile" = "openalea.datafile"
"openalea.file" = "openalea.file"
"openalea.functional" = "openalea.functional"
"openalea.math" = "openalea.math"
"openalea.model" = "openalea.model"
"openalea.pickling" = "openalea.pickling"
"openalea.plotools" = "openalea.plotools"
"openalea.python" = "openalea.python"
"openalea.spatial" = "openalea.spatial"
"openalea.stand" = "openalea.stand"
"openalea.stat" = "openalea.stat"
"openalea.system" = "openalea.system"
"openalea.tutorial" = "openalea.tutorial"
"openalea.tutorial.design pattern" = "openalea.tutorial.pattern"
"openalea.tutorial.functional" = "openalea.tutorial.functional"
"openalea.tutorial.multiprocess" = "openalea.tutorial.multiprocess"
"openalea.multiprocessing" = "openalea.multiprocessing"
"openalea.path" = "openalea.path"
# Deprecated
"catalog.color" = "deprecated"
"catalog.data" = "deprecated"
"catalog.csv" = "deprecated"
"catalog.file" = "deprecated"
"catalog.functional" = "deprecated"
"catalog.math" = "deprecated"
"catalog.model" = "deprecated"
"catalog.pickling" = "deprecated"
"catalog.python" = "deprecated"
"catalog.string" = "deprecated"
#image
"openalea.image" = "openalea.image_wralea"
"openalea.image.serial" = "openalea.image_wralea.serial"
"openalea.image.interpolation" = "openalea.image_wralea.interpolation"
"openalea.image.algo" = "openalea.image_wralea.algo"
"openalea.image.registration" = "openalea.image_wralea.registration"
"openalea.image.gui" = "openalea.image_wralea.gui"
"openalea.image.demo" = "openalea.image_demo_wralea"

[project.entry-points."openalea.image"]
"openalea.image/image" = "openalea.image.plugin.algo"

[project.entry-points."oalab.plugin"]
"oalab/image" = "openalea.image.plugin.oalab"

[project.entry-points."oalab.applet"]
"oalab.applet/image" = "openalea.image.plugin.applet"

[project.entry-points."openalea.interface"]
"openalea.interface/image" = "openalea.image.plugin.interface"